#BlueJ class context
comment0.params=item\ prev\ next
comment0.target=DListNode\ newNode(java.lang.Object,\ DListNode,\ DListNode)
comment0.text=\n\ \ newNode()\ calls\ the\ DListNode\ constructor.\ \ Use\ this\ class\ to\ allocate\n\ \ new\ DListNodes\ rather\ than\ calling\ the\ DListNode\ constructor\ directly.\n\ \ That\ way,\ only\ this\ method\ needs\ to\ be\ overridden\ if\ a\ subclass\ of\ DList\n\ \ wants\ to\ use\ a\ different\ kind\ of\ node.\n\ \ @param\ item\ the\ item\ to\ store\ in\ the\ node.\n\ \ @param\ prev\ the\ node\ previous\ to\ this\ node.\n\ \ @param\ next\ the\ node\ following\ this\ node.\n
comment1.params=
comment1.target=DList()
comment1.text=\n\ \ DList()\ constructor\ for\ an\ empty\ DList.\n
comment10.params=item\ node
comment10.target=void\ insertAfter(java.lang.Object,\ DListNode)
comment10.text=\n\ \ insertAfter()\ inserts\ an\ item\ in\ this\ DList\ immediately\ following\ "node".\n\ \ If\ "node"\ is\ null,\ do\ nothing.\n\ \ @param\ item\ the\ item\ to\ be\ inserted.\n\ \ @param\ node\ the\ node\ to\ insert\ the\ item\ after.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment11.params=item\ node
comment11.target=void\ insertBefore(java.lang.Object,\ DListNode)
comment11.text=\n\ \ insertBefore()\ inserts\ an\ item\ in\ this\ DList\ immediately\ before\ "node".\n\ \ If\ "node"\ is\ null,\ do\ nothing.\n\ \ @param\ item\ the\ item\ to\ be\ inserted.\n\ \ @param\ node\ the\ node\ to\ insert\ the\ item\ before.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment12.params=node
comment12.target=void\ remove(DListNode)
comment12.text=\n\ \ remove()\ removes\ "node"\ from\ this\ DList.\ \ If\ "node"\ is\ null,\ do\ nothing.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\n\ \ toString()\ returns\ a\ String\ representation\ of\ this\ DList.\n\n\ \ DO\ NOT\ CHANGE\ THIS\ METHOD.\n\n\ \ @return\ a\ String\ representation\ of\ this\ DList.\n\ \ Performance\:\ \ runs\ in\ O(n)\ time,\ where\ n\ is\ the\ length\ of\ the\ list.\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\n\ \ isEmpty()\ returns\ true\ if\ this\ DList\ is\ empty,\ false\ otherwise.\n\ \ @return\ true\ if\ this\ DList\ is\ empty,\ false\ otherwise.\ \n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment3.params=
comment3.target=int\ length()
comment3.text=\ \n\ \ length()\ returns\ the\ length\ of\ this\ DList.\ \n\ \ @return\ the\ length\ of\ this\ DList.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment4.params=item
comment4.target=void\ insertFront(java.lang.Object)
comment4.text=\n\ \ insertFront()\ inserts\ an\ item\ at\ the\ front\ of\ this\ DList.\n\ \ @param\ item\ is\ the\ item\ to\ be\ inserted.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment5.params=item
comment5.target=void\ insertBack(java.lang.Object)
comment5.text=\n\ \ insertBack()\ inserts\ an\ item\ at\ the\ back\ of\ this\ DList.\n\ \ @param\ item\ is\ the\ item\ to\ be\ inserted.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment6.params=
comment6.target=DListNode\ front()
comment6.text=\n\ \ front()\ returns\ the\ node\ at\ the\ front\ of\ this\ DList.\ \ If\ the\ DList\ is\n\ \ empty,\ return\ null.\n\n\ \ Do\ NOT\ return\ the\ sentinel\ under\ any\ circumstances\!\n\n\ \ @return\ the\ node\ at\ the\ front\ of\ this\ DList.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment7.params=
comment7.target=DListNode\ back()
comment7.text=\n\ \ back()\ returns\ the\ node\ at\ the\ back\ of\ this\ DList.\ \ If\ the\ DList\ is\n\ \ empty,\ return\ null.\n\n\ \ Do\ NOT\ return\ the\ sentinel\ under\ any\ circumstances\!\n\n\ \ @return\ the\ node\ at\ the\ back\ of\ this\ DList.\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment8.params=node
comment8.target=DListNode\ next(DListNode)
comment8.text=\n\ \ next()\ returns\ the\ node\ following\ "node"\ in\ this\ DList.\ \ If\ "node"\ is\n\ \ null,\ or\ "node"\ is\ the\ last\ node\ in\ this\ DList,\ return\ null.\n\n\ \ Do\ NOT\ return\ the\ sentinel\ under\ any\ circumstances\!\n\n\ \ @param\ node\ the\ node\ whose\ successor\ is\ sought.\n\ \ @return\ the\ node\ following\ "node".\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment9.params=node
comment9.target=DListNode\ prev(DListNode)
comment9.text=\n\ \ prev()\ returns\ the\ node\ prior\ to\ "node"\ in\ this\ DList.\ \ If\ "node"\ is\n\ \ null,\ or\ "node"\ is\ the\ first\ node\ in\ this\ DList,\ return\ null.\n\n\ \ Do\ NOT\ return\ the\ sentinel\ under\ any\ circumstances\!\n\n\ \ @param\ node\ the\ node\ whose\ predecessor\ is\ sought.\n\ \ @return\ the\ node\ prior\ to\ "node".\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
numComments=14
