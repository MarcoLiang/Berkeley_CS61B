#BlueJ class context
comment0.params=item\ list\ prev\ next
comment0.target=DListNode\ newNode(java.lang.Object,\ DList,\ DListNode,\ DListNode)
comment0.text=\n\ \ newNode()\ calls\ the\ DListNode\ constructor.\ \ Use\ this\ method\ to\ allocate\n\ \ new\ DListNodes\ rather\ than\ calling\ the\ DListNode\ constructor\ directly.\n\ \ That\ way,\ only\ this\ method\ need\ be\ overridden\ if\ a\ subclass\ of\ DList\n\ \ wants\ to\ use\ a\ different\ kind\ of\ node.\n\n\ \ @param\ item\ the\ item\ to\ store\ in\ the\ node.\n\ \ @param\ list\ the\ list\ that\ owns\ this\ node.\ \ (null\ for\ sentinels.)\n\ \ @param\ prev\ the\ node\ previous\ to\ this\ node.\n\ \ @param\ next\ the\ node\ following\ this\ node.\n
comment1.params=
comment1.target=DList()
comment1.text=\n\ \ DList()\ constructs\ for\ an\ empty\ DList.\n
comment2.params=item
comment2.target=void\ insertFront(java.lang.Object)
comment2.text=\n\ \ insertFront()\ inserts\ an\ item\ at\ the\ front\ of\ this\ DList.\n\n\ \ @param\ item\ is\ the\ item\ to\ be\ inserted.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment3.params=item
comment3.target=void\ insertBack(java.lang.Object)
comment3.text=\n\ \ insertBack()\ inserts\ an\ item\ at\ the\ back\ of\ this\ DList.\n\n\ \ @param\ item\ is\ the\ item\ to\ be\ inserted.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment4.params=
comment4.target=ListNode\ front()
comment4.text=\n\ \ front()\ returns\ the\ node\ at\ the\ front\ of\ this\ DList.\ \ If\ the\ DList\ is\n\ \ empty,\ return\ an\ "invalid"\ node--a\ node\ with\ the\ property\ that\ any\n\ \ attempt\ to\ use\ it\ will\ cause\ an\ exception.\ \ (The\ sentinel\ is\ "invalid".)\n\n\ \ DO\ NOT\ CHANGE\ THIS\ METHOD.\n\n\ \ @return\ a\ ListNode\ at\ the\ front\ of\ this\ DList.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment5.params=
comment5.target=ListNode\ back()
comment5.text=\n\ \ back()\ returns\ the\ node\ at\ the\ back\ of\ this\ DList.\ \ If\ the\ DList\ is\n\ \ empty,\ return\ an\ "invalid"\ node--a\ node\ with\ the\ property\ that\ any\n\ \ attempt\ to\ use\ it\ will\ cause\ an\ exception.\ \ (The\ sentinel\ is\ "invalid".)\n\n\ \ DO\ NOT\ CHANGE\ THIS\ METHOD.\n\n\ \ @return\ a\ ListNode\ at\ the\ back\ of\ this\ DList.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ \ toString()\ returns\ a\ String\ representation\ of\ this\ DList.\n\n\ \ DO\ NOT\ CHANGE\ THIS\ METHOD.\n\n\ \ @return\ a\ String\ representation\ of\ this\ DList.\n\n\ \ Performance\:\ \ runs\ in\ O(n)\ time,\ where\ n\ is\ the\ length\ of\ the\ list.\n
comment7.params=p
comment7.target=void\ testInvalidNode(ListNode)
comment8.params=
comment8.target=void\ testEmpty()
comment9.params=argv
comment9.target=void\ main(java.lang.String[])
numComments=10
